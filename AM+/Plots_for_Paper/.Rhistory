names(df) <- c("Pop", "method","time")
##--------------------
p <- ggplot(df, aes(x=Pop, y=time, group=method,shape=method, colour=method)) +
geom_line(size=2) + geom_point(aes(colour=method),size=5) +
scale_shape_manual(breaks=c("am.", "gemma", "fastALL", "fast"),
labels=c("Eagle",
"GEMMA",
bquote('FaST-LMM'^all),
bquote('FaST-LMM'^few)),
values=c(rep(19,1),rep(17,3)))+
scale_colour_manual(breaks=c("am.", "gemma", "fastALL", "fast"),
labels=c("Eagle",
"GEMMA",
bquote('FaST-LMM'^all),
bquote('FaST-LMM'^few)),
values=brewer.pal(10, "Paired")[c(1,8,6,7)]) +
scale_size(guide = 'none') ## suppressed extra legend for size
p
p <- ggplot(df, aes(x=Pop, y=time, group=method,shape=method, colour=method)) +
geom_line(size=2) + geom_point(aes(colour=method),size=5)
p
levels(df$method)
brewer.pal(10, "Paired")
setwd("/Users/geo047/Papers/AM-Paper/AM+/Plots_for_Paper")
df <- read.table(file="cputimes.dat", header=TRUE)
sizefn <- 12
df<- melt(df)
names(df) <- c("Pop", "method","time")
df$time[df$time<1] <- 1  ## setting times less than 1 to 1
levels(df$Pop) <- c(10000*1500000, 150*5000, 1500*50000,2000*500000, 350*400000,  4000*1500000)
df$Pop <- as.numeric(as.character(df$Pop))
pps <- sort(unique(df$Pop))
names(df) <- c("Pop", "method","time")
##--------------------
## times - times
##--------------------
## data frame for line segments
gsdf <- data.frame(x1=(pps), y1=rep(1,length(pps)),
x2 = (pps), y2=c(700,500,700,500,700,500))
##-------------------
levels(df$method)
df <- read.table(file="abscputimes.dat", header=TRUE)
# remove column for am.GPU
indx <- which(colnames(df)=="am.GPU")
df <- df[, -indx]
sizefn <- 12
indx <- which(df[,2:ncol(df)]<1, arr.ind=TRUE)
# add on first col
indx[,"col"] <- indx[, "col"] + 1
df[indx] <- 1
df[df<1] <- 1  ## so that it will plot on the log scale
df<- melt(df)
levels(df$Pop) <- c(10000*1500000, 150*5000, 1500*50000,2000*500000, 350*400000,  4000*1500000)
df$Pop <- as.numeric(as.character(df$Pop))
pps <- sort(unique(df$Pop))
names(df) <- c("Pop", "method","time")
##--------------------
levels(df$method)
source('~/Papers/AM-Paper/AM+/Plots_for_Paper/time_and_mem_plot_for_paper.R')
require(ggplot2)
library(GGally)
library(ggthemes)
library(gridExtra)
library("reshape2")
library(RColorBrewer)
##----------------------
##  CPU times
##-----------------------
## raw plots and logdf plots do not look that good. am+ is better but not by much.
## going to try am+ as benchmark and comparing everything against it. -ve values mean
## other approach is better.
setwd("/Users/geo047/Papers/AM-Paper/AM+/Plots_for_Paper")
df <- read.table(file="cputimes.dat", header=TRUE)
sizefn <- 12
df<- melt(df)
names(df) <- c("Pop", "method","time")
df$time[df$time<1] <- 1  ## setting times less than 1 to 1
levels(df$Pop) <- c(10000*1500000, 150*5000, 1500*50000,2000*500000, 350*400000,  4000*1500000)
df$Pop <- as.numeric(as.character(df$Pop))
pps <- sort(unique(df$Pop))
names(df) <- c("Pop", "method","time")
##--------------------
## times - times
##--------------------
## data frame for line segments
gsdf <- data.frame(x1=(pps), y1=rep(1,length(pps)),
x2 = (pps), y2=c(700,500,700,500,700,500))
##-------------------
##  Main plot
##--------------------
## maybe draw vertical lines first to get around problem.
p <- ggplot(df, aes(x=Pop, y=time, group=method,shape=method, colour=method)) +
geom_line(size=2) + geom_point(aes(colour=method),size=4) +
scale_shape_manual(breaks=c("am.", "mlmm","glmnet","lasso","rf_ranger","bigRR"),
labels=c("Eagle", "MLMM","glmnet", "LMM-Lasso",
"r2VIM","bigRR"),
values=c(rep(19,6)))+
scale_colour_manual(breaks=c("am.", "mlmm","glmnet","lasso","rf_ranger","bigRR"),
labels=c("Eagle", "MLMM","glmnet", "LMM-Lasso",
"r2VIM","bigRR"),
values=brewer.pal(10, "Paired")[c(2,1,3, 4,5, 6)]) +
scale_size(guide = 'none')
p
## suppressed extra legend for size
## the reordered colors is complicated but it is based on the original colors
## being of the order 1,2,5,3,4 (don't know why ggplot2 would do it this way) so
## I had to put color 2 in position 1,
##                    3  ->         2,
##                    4  ->         5,
##                    5  ->         3,
##                    6  ->         4,
## and the rest dont matter because they are not used.
p  <- p +  geom_segment(aes(x=7.5e5, y=0,xend=7.5e5,yend=6000), colour="grey", cex=0.5) +
geom_segment(aes(x=7.5e7, y=0,xend=7.5e7,yend=4000), colour="grey", cex=0.5) +
geom_segment(aes(x=1.4e8, y=0,xend=1.4e8,yend=6000), colour="grey", cex=0.5) +
geom_segment(aes(x=1.0e9, y=0,xend=1.0e9,yend=4000), colour="grey", cex=0.5) +
geom_segment(aes(x=6.0e9, y=0,xend=6.0e9,yend=6000), colour="grey", cex=0.5) +
geom_segment(aes(x=1.5e10,y=0,xend=1.5e10,yend=4000), colour="grey", cex=0.5)
## log log scale
p  <- p + scale_x_continuous(trans="log10", limits=c(500000, 1e11),
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
)+
scale_y_continuous(trans="log10", limits=c(1, 10000),
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)))
##log tick marks
p <- p +annotation_logticks(scale=TRUE, side="bl")
## make more room around plot
p <- p + theme(plot.margin = grid::unit(c(1,0,4,1), "lines"))
## set theme
p <-  p + theme_classic()
## specify xlab and ylab
p <- p  + ylab(bquote("Median of elapse times (in minutes)\n")) +
xlab(bquote('Number of genotypes'))
##  change x and y labels size and bold
p <- p + theme(axis.title.x = element_text(angle=0, vjust=1, size=12))
p <- p + theme(axis.title.y = element_text(angle=90, vjust=1, size=12))
# alter x and y axis labels
p <- p +
theme(axis.text.x = element_text(size=12,  angle=0)) +
theme(axis.text.y=element_text(size=sizefn, hjust=0.5))
## increase font of lengend + remove legend title
p <- p +  theme(legend.text=element_text(size=sizefn))
p <- p +  theme(legend.title=element_blank())
p <- p+ theme(legend.key.width=grid:::unit(1.5,"cm"))
## add text to plots
p <- p +  annotate("text", x=pps, y=rep(9000,length(pps)), label= c("150x5K" ,
"",
"350x400K" ,
"",
"4000x1.5M",
""),
size=4)
p <- p +  annotate("text", x=pps, y=rep(6000,length(pps)), label= c("" ,
"1500x50K",
"" ,
"2000x500K",
"",
"10000x1.5M"),
size=4)
p <- p + theme(legend.position = c(0.82, 0.8),
legend.justification = c(0, 1))
# remove x axis labels
#p <- p + theme(axis.text.x=element_blank(),axis.title.x=element_blank())
## putting some space around the plot
p <- p + theme(plot.margin = grid::unit(c(1,5,1,1), "lines"))
p_time <- p
p_time
##----------------------------------------------------------
## Absolute times for fast, fastall, gemma, am+
##----------------------------------------------------------
df <- read.table(file="abscputimes.dat", header=TRUE)
# remove column for am.GPU
indx <- which(colnames(df)=="am.GPU")
df <- df[, -indx]
sizefn <- 12
indx <- which(df[,2:ncol(df)]<1, arr.ind=TRUE)
# add on first col
indx[,"col"] <- indx[, "col"] + 1
df[indx] <- 1
df[df<1] <- 1  ## so that it will plot on the log scale
df<- melt(df)
levels(df$Pop) <- c(10000*1500000, 150*5000, 1500*50000,2000*500000, 350*400000,  4000*1500000)
df$Pop <- as.numeric(as.character(df$Pop))
pps <- sort(unique(df$Pop))
names(df) <- c("Pop", "method","time")
##--------------------
p <- ggplot(df, aes(x=Pop, y=time, group=method,shape=method, colour=method)) +
geom_line(size=2) + geom_point(aes(colour=method),size=5) +
scale_shape_manual(breaks=c("am.", "gemma", "fastALL", "fast"),
labels=c("Eagle",
"GEMMA",
bquote('FaST-LMM'^all),
bquote('FaST-LMM'^few)),
values=c(rep(19,1),rep(17,3)))+
scale_colour_manual(breaks=c("am.", "gemma", "fastALL", "fast"),
labels=c("Eagle",
"GEMMA",
bquote('FaST-LMM'^all),
bquote('FaST-LMM'^few)),
values=brewer.pal(10, "Paired")[c(2,7,9,10)]) +
scale_size(guide = 'none') ## suppressed extra legend for size
p  <- p +  geom_segment(aes(x=7.5e5, y=0,xend=7.5e5,yend=6000), colour="grey", cex=0.5) +
geom_segment(aes(x=7.5e7, y=0,xend=7.5e7,yend=4000), colour="grey", cex=0.5) +
geom_segment(aes(x=1.4e8, y=0,xend=1.4e8,yend=6000), colour="grey", cex=0.5) +
geom_segment(aes(x=1.0e9, y=0,xend=1.0e9,yend=4000), colour="grey", cex=0.5) +
geom_segment(aes(x=6.0e9, y=0,xend=6.0e9,yend=6000), colour="grey", cex=0.5) +
geom_segment(aes(x=1.5e10,y=0,xend=1.5e10,yend=4000), colour="grey", cex=0.5)
## log log scale
p  <- p + scale_x_continuous(trans="log10", limits=c(500000, 1e11),
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
)+
scale_y_continuous(trans="log10", limits=c(1, 10000),
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)))
##log tick marks
p <- p +annotation_logticks(scale=TRUE, side="bl")
## make more room around plot
p <- p + theme(plot.margin = grid::unit(c(1,0,4,1), "lines"))
## set theme
p <-  p + theme_classic()
## specify xlab and ylab
p <- p  + ylab(bquote("Median of elapse times (in minutes) \n")) +
xlab(bquote('\nNumber of genotypes'))
##  change x and y labels size and bold
p <- p + theme(axis.title.x = element_text(angle=0, vjust=1, size=12))
p <- p + theme(axis.title.y = element_text(angle=90, vjust=1, size=12))
# alter x and y axis labels
p <- p +
theme(axis.text.x = element_text(size=12,  angle=0)) +
theme(axis.text.y=element_text(size=sizefn, hjust=0.5))
## increase font of lengend + remove legend title
p <- p +  theme(legend.text=element_text(size=sizefn))
p <- p +  theme(legend.title=element_blank())
p <- p+ theme(legend.key.width=grid:::unit(1.5,"cm"))
## add text to plots
p <- p +  annotate("text", x=pps, y=rep(9000,length(pps)), label= c("150x5K" ,
"",
"350x400K" ,
"",
"4000x1.5M",
""),
size=4)
p <- p +  annotate("text", x=pps, y=rep(6000,length(pps)), label= c("" ,
"1500x50K",
"" ,
"2000x500K",
"",
"10000x1.5M"),
size=4)
p <- p + theme(legend.position = c(0.82, 0.8),
legend.justification = c(0, 1))
## putting some space around the plot
p <- p + theme(plot.margin = grid::unit(c(1,5,1,1), "lines"))
p_abstime <- p
p_abstime
##-----------------------------
## Multiple plots on single page
##------------------------------
library(grid)
postscript("~/Papers/AM-Paper/time1.eps", width=10, height=10,
horizontal=FALSE)
# square plot
p_time + coord_fixed()
dev.off()
postscript("~/Papers/AM-Paper/time2.eps", width=10, height=10,
horizontal=FALSE)
# square plot
p_abstime + coord_fixed()
dev.off()
##----------------------------------------------------------
## Absolute times for fast, fastall, gemma, am+
##----------------------------------------------------------
df <- read.table(file="abscputimes.dat", header=TRUE)
# remove column for am.GPU
indx <- which(colnames(df)=="am.GPU")
df <- df[, -indx]
sizefn <- 12
indx <- which(df[,2:ncol(df)]<1, arr.ind=TRUE)
# add on first col
indx[,"col"] <- indx[, "col"] + 1
df[indx] <- 1
df[df<1] <- 1  ## so that it will plot on the log scale
df<- melt(df)
levels(df$Pop) <- c(10000*1500000, 150*5000, 1500*50000,2000*500000, 350*400000,  4000*1500000)
df$Pop <- as.numeric(as.character(df$Pop))
pps <- sort(unique(df$Pop))
names(df) <- c("Pop", "method","time")
##--------------------
p <- ggplot(df, aes(x=Pop, y=time, group=method,shape=method, colour=method)) +
geom_line(size=2) + geom_point(aes(colour=method),size=5) +
scale_shape_manual(breaks=c("am.", "gemma", "fastALL", "fast"),
labels=c("Eagle",
"GEMMA",
bquote('FaST-LMM'^all),
bquote('FaST-LMM'^few)),
values=c(rep(19,1),rep(17,3)))+
scale_colour_manual(breaks=c("am.", "gemma", "fastALL", "fast"),
labels=c("Eagle",
"GEMMA",
bquote('FaST-LMM'^all),
bquote('FaST-LMM'^few)),
values=brewer.pal(10, "Paired")[c(2,7,9,10)]) +
scale_size(guide = 'none') ## suppressed extra legend for size
p  <- p +  geom_segment(aes(x=7.5e5, y=0,xend=7.5e5,yend=6000), colour="grey", cex=0.5) +
geom_segment(aes(x=7.5e7, y=0,xend=7.5e7,yend=4000), colour="grey", cex=0.5) +
geom_segment(aes(x=1.4e8, y=0,xend=1.4e8,yend=6000), colour="grey", cex=0.5) +
geom_segment(aes(x=1.0e9, y=0,xend=1.0e9,yend=4000), colour="grey", cex=0.5) +
geom_segment(aes(x=6.0e9, y=0,xend=6.0e9,yend=6000), colour="grey", cex=0.5) +
geom_segment(aes(x=1.5e10,y=0,xend=1.5e10,yend=4000), colour="grey", cex=0.5)
## log log scale
p  <- p + scale_x_continuous(trans="log10", limits=c(500000, 1e11),
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x))
)+
scale_y_continuous(trans="log10", limits=c(1, 10000),
breaks = scales::trans_breaks("log10", function(x) 10^x),
labels = scales::trans_format("log10", scales::math_format(10^.x)))
##log tick marks
p <- p +annotation_logticks(scale=TRUE, side="bl")
## make more room around plot
p <- p + theme(plot.margin = grid::unit(c(1,0,4,1), "lines"))
## set theme
p <-  p + theme_classic()
## specify xlab and ylab
p <- p  + ylab(bquote("Median of elapse times (in minutes) \n")) +
xlab(bquote('Number of genotypes'))
##  change x and y labels size and bold
p <- p + theme(axis.title.x = element_text(angle=0, vjust=1, size=12))
p <- p + theme(axis.title.y = element_text(angle=90, vjust=1, size=12))
# alter x and y axis labels
p <- p +
theme(axis.text.x = element_text(size=12,  angle=0)) +
theme(axis.text.y=element_text(size=sizefn, hjust=0.5))
## increase font of lengend + remove legend title
p <- p +  theme(legend.text=element_text(size=sizefn))
p <- p +  theme(legend.title=element_blank())
p <- p+ theme(legend.key.width=grid:::unit(1.5,"cm"))
## add text to plots
p <- p +  annotate("text", x=pps, y=rep(9000,length(pps)), label= c("150x5K" ,
"",
"350x400K" ,
"",
"4000x1.5M",
""),
size=4)
p <- p +  annotate("text", x=pps, y=rep(6000,length(pps)), label= c("" ,
"1500x50K",
"" ,
"2000x500K",
"",
"10000x1.5M"),
size=4)
p <- p + theme(legend.position = c(0.82, 0.8),
legend.justification = c(0, 1))
## putting some space around the plot
p <- p + theme(plot.margin = grid::unit(c(1,5,1,1), "lines"))
p_abstime <- p
p_abstime
##-----------------------------
## Multiple plots on single page
##------------------------------
library(grid)
postscript("~/Papers/AM-Paper/time1.eps", width=10, height=10,
horizontal=FALSE)
# square plot
p_time + coord_fixed()
dev.off()
postscript("~/Papers/AM-Paper/time2.eps", width=10, height=10,
horizontal=FALSE)
# square plot
p_abstime + coord_fixed()
dev.off()
source('~/Papers/AM-Paper/AM+/Plots_for_Paper/power_plots.R')
p
postscript("~/Papers/AM-Paper/powerSingle.eps", width=10, height=10, fonts=c("sans", fonts()),
horizontal=FALSE)
p
dev.off()
##  "n_glmnet", "nQTL_glmnet",
##  "n_bigRR",  "nQTL_bigRR",
##  "n_ranger",  "nQTL_ranger",
##  "n_lasso", "nQTL_lasso",
##   n_gemma, nQTL_gemma,
##   n_fast, nQTL_fast,
##   n_fastALL, nQTL_fastALL,
##  "nQTL_true")
## Note
## moved from smoothed power curves to lines based on mean. Smoothed curves weird.
require(ggplot2)
library(GGally)
library(ggthemes)
library(gridExtra)
library(RColorBrewer)
library(extrafont)
DIR <- paste(getwd(),"/", sep="")
DIR <- "/Users/geo047/Papers/AM-Paper/AM+/Plots_for_Paper/"
sizefn <- 16
thresh_indx <- 1:500
## vector initialisation
fam <- c("W", "S",  "L","HS","A","HL")
names.of.methods <- c("am", "mlmm","glmnet","lasso","r2VIM","bigRR", "gemma", "fastALL", "fast")
FDR <- list()
recall <- list()  ## == power
dfres <- list()
##----------------------------------------
## Forming list with FDR and recall(power)
## results over families and threshold indexes
##------------------------------------------
cat(" Forming FDR and power(recall) results ... \n")
## looping over families
for(ff in fam){
FDR[[ff]] <- list()
recall[[ff]] <- list()
## looing over threshold indexes
for(indx in thresh_indx){
FDR[[ff]][[indx]] <- list()
recall[[ff]][[indx]] <- list()
## Load Data RData Objects
filename <- paste(DIR,"res",ff,"_",indx, ".RData", sep="")
load(filename)   #  # loads res_mat
for(ii in names.of.methods){
n_method <- paste("n_",ii, sep="")
nQTL_method <- paste("nQTL_",ii, sep="")
## ---- Set Power (recall) and FDR
tmp <-  1 - (mat[, eval(nQTL_method)]/
mat[, eval(n_method)])
tmp[is.nan(tmp)] <- 0
FDR[[ff]][[indx]][[ii]] <- mean(tmp, na.rm=TRUE)
# capturing case where there may not be any results
if(is.nan(FDR[[ff]][[indx]][[ii]]))
FDR[[ff]][[indx]][[ii]] <- NA
recall[[ff]][[indx]][[ii]] <- mean(mat[,eval(nQTL_method)]   / mat[, "nQTL_true"],
na.rm=TRUE)
if(is.nan(recall[[ff]][[indx]][[ii]]))
recall[[ff]][[indx]][[ii]] <- NA
}  ## end for ii
} ## end for  indx
} ## end for family
## form results structure
## method,  fam,  rep,  FDR
dfres <- data.frame()
## looping over families
for(ff in names(FDR))
{
cat(" Reading in family", ff, "\n")
## looping over threshold indexes
for(indx in thresh_indx)
{
## looping over methods
for(mm in names(FDR[[1]][[1]])){
df <- data.frame(method=mm, fam=ff, rep=1:length(FDR[[1]][[1]][[1]]),
FDR=FDR[[ff]][[indx]][[mm]] ,
recall = recall[[ff]][[indx]][[mm]] )
dfres <- rbind.data.frame(dfres , df)
} ## end for thresh_indx
}  ## end for mm
}  ## end for ff
dfres$FDR[which(is.nan(dfres$FDR))] <- 0
dfres$recall[which(is.nan(dfres$recall))] <- 0
## change ordering of factor levels to change order of facet_wrap
dfres$method <- factor(dfres$method, levels=c("am", "mlmm",   "glmnet", "lasso",  "r2VIM",  "bigRR", "gemma",
"fastALL", "fast"))
levels(dfres$method) <- c("AMplus", "MLMM", "glmnet", "LMM-Lasso", "r2VIM", "bigRR", "GEMMA", "FaST-LMM^all",
"FaST-LMM^few")
levels(dfres$fam) <- c("150 x 5K", "350 x 500K", "1500 x 50K", "2000 x 500K",
"4000 x 1.5M", "10000 x 1.5M")
##------------------------------------
## Draw plot for multi-locus methods
##-------------------------------------
## dropping MLMM recall values by a little bit because they are lower and so that we can see it in the plot
dfres[which(dfres$method=="MLMM"), "recall"] <-  dfres[which(dfres$method=="MLMM"), "recall"] * 0.95
df1 <- subset(subset(dfres, !(method=="AMplus" | method=="MLMM" | method=="GEMMA" | method=="FaST-LMM^few" | method=="FaST-LMM^all" )),
!(fam=="4000 x 1.5M" | fam=="10000 x 1.5M"))
df2 <- subset(subset(dfres, method=="AMplus" | method=="MLMM"),  !(fam=="4000 x 1.5M" | fam=="10000 x 1.5M"))
library(RColorBrewer)
p <- ggplot(data=df1, aes(FDR, recall, color=method)) + geom_line(size=1)  +
geom_point(data=df2, aes(FDR, recall), size=2) +
facet_wrap(~fam, ncol=2) +
theme(aspect.ratio = 1) # try with and without
p <- p + scale_color_manual(
breaks=c("AMplus","MLMM","bigRR","glmnet","LMM-Lasso","r2VIM"),
values=RColorBrewer:::brewer.pal(9, "Paired")[c(1,4,3,5,2,9)],
guide = guide_legend(override.aes = list(
linetype = c("blank", "blank", "solid", "solid", "solid", "solid"),
shape=c(16, 16, NA, NA, NA, NA))))
p
## set theme
p <- p + theme_hc()
## increase spacing between facet plots
p <- p + theme(panel.spacing = unit(3, "lines"))
## specify xlab and ylab
p <- p  + ylab(bquote("Power")) +
xlab(bquote('False discovery rate'))
##  change x and y labels size and bold
p <- p + theme(axis.title.x = element_text(angle=0, vjust=1, size=14))
p <- p + theme(axis.title.y = element_text(angle=90, vjust=1, size=14))
# alter x and y axis labels
p <- p +
theme(axis.text.x = element_text(size=11,  angle=0)) +
theme(axis.text.y=element_text(size=11, hjust=0.5)) +
theme(strip.text = element_text(size=14))
## increase font of lengend + remove legend title
p <- p +  theme(legend.text=element_text(size=12))
p <- p +  theme(legend.title=element_blank())
p <- p+ theme(legend.key.width=grid:::unit(1.5,"cm"))
postscript("~/Papers/AM-Paper/powerMultiple.eps", width=10, height=10, fonts=c("sans", fonts()),
horizontal=FALSE)
p
dev.off()
